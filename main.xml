<?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?>

<glsl_hacker>
	
  <window name="win3d01" title="Textured 3D Box" width="800" height="500"
          gl_version_major="3" gl_version_minor="2" />
  
 
  
  
	<script name="init_scene" run_mode="INIT" 
        filename="init.lua"
        livecoding_from_file="1" 
        livecoding_from_file_update_delay="0.2"/>
  
<script name="update_scene" run_mode="FRAME" 
        filename="frame.lua" 
        livecoding_from_file="1" 
        livecoding_from_file_update_delay="0.2"/>
	

	<script name="resize_scene" run_mode="SIZE" >
		<raw_data><![CDATA[	

winW, winH = gh_window.getsize(0)

mx, my = gh_input.mouse_get_position()



-- This is how we resize a perspective camera.
--
local aspect = 1.333
if (winH > 0) then
  aspect = winW / winH
end  
gh_camera.update_persp(camera, 60, aspect, 1.0, 100.0)
gh_camera.set_viewport(camera, 0, 0, winW, winH)





gh_utils.font_set_viewport_info(font, 0, 0, winW, winH)

		]]></raw_data>
	</script> 





<!--
	A simple texturing GPU programs.
-->	
  <gpu_program name="tex_prog" 
    filename_vs="shaders/gl32_vs.glsl" livecoding_from_file_vs="1"
    filename_gs="shaders/gl32_gs.glsl" livecoding_from_file_gs="1"
    filename_ps="shaders/gl32_ps.glsl" livecoding_from_file_ps="1" >    
  </gpu_program>

  <gpu_program name="simple_prog" 
    filename_vs="shaders/simple_vs.glsl" livecoding_from_file_vs="1"
    filename_ps="shaders/simple_fs.glsl" livecoding_from_file_ps="1" >    
  </gpu_program>
  


<!--
	One of the most simple GPU programs.
	gl_Color is the color of a vertex.
-->	
  <gpu_program name="vertex_color_prog" >
    <raw_data_vs><![CDATA[	 
#version 120
varying vec4 v_color;
void main()
{
	gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;		
	v_color = gl_Color;
}
  ]]></raw_data_vs>
    <raw_data_ps><![CDATA[	 
#version 120
varying vec4 v_color;
void main (void)
{
  gl_FragColor = v_color;
}
    ]]></raw_data_ps>
  </gpu_program>
  







  
  
</glsl_hacker>
